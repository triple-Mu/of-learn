git config --global user.email "865626@163.com"
git config --global user.name "q3394101"

git clone git@github.com:q3394101/yolov5-rt-stack.git
cd yolov5-rt-stack
git remote add upstream git://github.com/zhiqwang/yolov5-rt-stack.git
git fetch upstream # 跟进上游仓库的更新
git rebase upstream/main # 上游跟fork仓库有冲突 会重置fork仓库

git checkout -b feature # 本地切换到feature分支
code . # 修改代码 增加新功能
git add . # 修改代码同步到暂存区
git commit -m "本次修改了***"
git push origin feature


# 暂存区内容撤销
1.没用git add .的话
git checkout -- 修改的文件
2.已经git add .但没有git commit
git reset HEAD 修改的文件
git status #查看状态
git checkout -- 修改的文件

# 暂存区内容删除
git rm --cache 修改的文件 #删除暂存区文件 本地不删除
git rm -f 修改的文件 #删除暂存区文件 本地也删除


# 撤销commit
git reset --soft HEAD^ #撤销了commit 本地代码不动 HEAD^和HEAD~1等价 撤销最近前n次
git reset --soft HEAD^ #撤销了commit 本地代码回到撤销前状态 中间的白写了
git rm 修改的文件 #从commit下撤回到add后的状态

# 查看git操作历史
git log -n #查看最近n次历史

# 本地分支操作
git branch #查看本地所有分支
git branch 分支名 #新建分支
git checkout -b 分支名 #检查并切换分支
git merge 分支A #把分支A合并到本分支
git branch -d 分支名 #删除分支
git branch -D 分支名 #强制删除分支
git branch -m 旧分支名 新分支名 #分支改名
git branch -M 旧分支名 新分支名 #分支强制改名
git branch -r #查看远程所有分支名
git branch -a #查看远程分支和本地分支 远程分支会有remote字样

# 本地和远程操作
git push -u origin 分支名 # 
git push -u origin 分支名 #将本地分支推送到origin主机，同时指定origin为默认主机，后面就可以不加任何参数使用git push 也可解决 git建立远程分支关联时出现fatal ... upstram的问题
git push origin --delete 分支名 #将git branch -D 分支名 删掉的分支 同步到远程主机 将origin/分支名的该分支也删除掉

cat /etc/redhat-release